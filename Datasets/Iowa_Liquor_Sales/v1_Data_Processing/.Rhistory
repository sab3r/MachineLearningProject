get()
getwd()
x <- c(1:3,7,8:10)
attributes(x)
class(x)
z<-0.9
class(z)
z <- 0:9
class(z)
digits <- as.character(z)
class(digits)
digits
d <- as.interger(digits)
d <- as.integer(digits)
d
name <- c("Amy", "Bill", "Carl")
DAD <- c(80, 65, 50)
BDA <- c(70, 50, 80)
gender <- as.factor(c("F", "M", "M"))
?as.factor()
nationality <- as.factor(c("IRL", "UK", "IRL"))
age <- c(20,21,22)
student.df <- data.frame(name, age, gender, nationality, DAD, BDA)
student.df
attributes(student.df)
print(student)
print(student.df)
str(student.df)
summary(student.df)
student.df['age']
student.df['name']
student.df['nationality']
student.df$naem
student.df$name
student.df$age
student.df$DBA
student.df$BDA
student.df$gender
student.df$nationalityu
student.df$nationality
student.df$nationality[2]
mean(student.df$DAD)
median(student.df$DAD)
student.df$average <- (student.df$DAD + student.df$BDA)/2
student.df
attributes(student.df
)
str(student.df)
?as.
?as
student.df$name <- as.character(student.df$name)
?as
str(student.df)
student.df <- rbind(student.df, c("Dennis", 12, "M", UK), 55, 70)
student.df <- rbind(student.df, c("Dennis", 12, "M", "UK", 55, 70))
student.df
student.df$BDA[3] <- 60
student.df
student.df$total <- (student.df$DAD + student.df$BDA)
student.df$total <- student.df$DAD + student.df$BDA
str(student.df)
student.df$DAD <- as.numeric(student.df$DAD)
student.df$BDA <- as.numeric(student.df$BDA)
student.df$total <- (student.df$DAD + student.df$BDA)
student.df
student.df <- rbind(student.df , c("Soham", 19, "M", "IRL", 60, 80))
student.df
student.df <- rbind(student.df , c("Tanvi", 16, "F", as.factor("US"), 60, 80, 70, 140))
student.df
student.df <- student.df[-c(6), ]
student.df
student.df$nationality <- factor(student.df$nationality, levels = c("IRL", "UK", "US"))
str(student.df$nationality)
student.df <- rbind(student.df , c("Tanvi", 16, "F", as.factor("US"), 60, 80, 70, 140))
student.df
student.df <- student.df[-c(6), ]
student.df <- rbind(student.df , c("Tanvi", 16, "F", "US", 60, 80, 70, 140))
student.df
student.df$nationality <- factor(student.df$nationality, levels = c("IRL", "UK", "US", "SA"))
student.df
student.df <- rbind(student.df , c("Midhun", 26, "M", "SA", 60, 80, 70, 140))
student.df
levels(student.df$nationality)
averages <- tapply(student.df$DAD, student.df$nationality, mean)
str(student.df)
student.df$DAD <- as.numeric(student.df$DAD)
student.df$BDA <- as.numeric(student.df$BDA)
averages <- tapply(student.df$DAD, student.df$nationality, mean)
averages
install.packages(htmltab)
install.packages(htmltab)
install.packages(htmltab::htmltabn)
install.packages(htmltab::htmltab)
install.packages(htmltab)
installed.packages()
install.packages(htmltab)
install.packages("htmltab")
?htmltab::htmltab
library(htmltab)
url <- "https://en.wikipedia.org/wiki/Game_of_Thrones"
seasons <- htmltab(doc=url, which="//*[@id="mw-content-text"]/div/table[2]")
seasons <- htmltab(doc=url, which='//*[@id="mw-content-text"]/div/table[2]')
library(htmltab)
url <- "https://en.wikipedia.org/wiki/Game_of_Thrones"
seasons <- htmltab(doc=url, which='//*[@id="mw-content-text"]/div/table[2]')
head(seasons)
source('~/.active-rstudio-document', echo=TRUE)
head(seasons,7)
head(seasons,1)
head(seasons)
rownames(seasons) <- c(1:8)
head(seasons)
head(seasons,8)
head(seasons,9)
criticResponses <- htmltab(doc=url, which=3)
head(criticResponses)
rownames(criticResponses) <- c(1:8)
head(criticResponses)
head(criticResponses,8)
factor(criticResponses$Season)
factor(seasons$Season)
library(tm)
install.packages("tm")
library(tm)
stopWords = "Season "
x = season$Season
x = seasons$Season
x = removeWords(x, stopWords)
x
seasons$Season <- x
seasons
factor(seasons$Season)
GoTWiki <- merge(seasons, criticResponses, by="Season")
head(GoTWiki)
fakeSeasons <- c(8:100)
fakeText <- rep("fake", length(fakeSeasons))
fakeText
fake.df.seasons <- data.frame(fakeSeasons, fakeText, fakeText, fakeText, fakeText, fakeText)
fake
fake.df
fake.df.seasons
names(fake.df.seasons) <-names(seasons)
fake.df.seasons
head(fake.df.seasons,7)
fake.df.seasons[1] <- as.character(fake.df.seasons[1])
fake.df.seasons[2] <- as.character(fake.df.seasons[2])
fake.df.seasons[3] <- as.character(fake.df.seasons[3])
fake.df.seasons[4] <- as.character(fake.df.seasons[4])
fake.df.seasons[5] <- as.character(fake.df.seasons[5])
fake.df.seasons[6] <- as.character(fake.df.seasons[6])
fake.df.seasons[7] <- as.character(fake.df.seasons[7])
fake.df.seasons[0] <- as.character(fake.df.seasons[0])
fake.df.seasons[1] <- as.factor(fake.df.seasons[1])
head(fake.df.seasons,7)
fake.df.seasons <- data.frame(fakeSeasons, fakeText, fakeText, fakeText, fakeText, fakeText)
head(fake.df.seasons,7)
names(fake.df.seasons) <-names(seasons)
fake.df.seasons$Ordered <- as.factor(fake.df.seasons[1])
head(fake.df.seasons,7)
fake.df.seasons$Ordered <- as.factor(fake.df.seasons$Ordered)
fake.df.seasons$Filming <- as.character(fake.df.seasons$Filming)
fake.df.seasons$'First aired' <- as.character(fake.df.seasons$'First aired')
fake.df.seasons$'Last aired' <- as.character(fake.df.seasons$'Last aired')
fake.df.seasons$'Novel(s) adapted' <- as.character(fake.df.seasons$'Novel(s) adapted')
head(fake.df.seasons,7)
fake.df.seasons <- data.frame(fakeSeasons, fakeText, fakeText, fakeText, fakeText, fakeText)
names(fake.df.seasons) <-names(seasons)
fake.df.seasons$Ordered <- as.character(fake.df.seasons$Ordered)
fake.df.seasons$Filming <- as.character(fake.df.seasons$Filming)
fake.df.seasons$'First aired' <- as.character(fake.df.seasons$'First aired')
fake.df.seasons$'Last aired' <- as.character(fake.df.seasons$'Last aired')
fake.df.seasons$'Novel(s) adapted' <- as.character(fake.df.seasons$'Novel(s) adapted')
head(fake.df.seasons,7)
fakeReviews <- c(101:200)
fakeScores1 <- round(runif(length(fakeReviews), min=1, max=100))
fakeScores1
fakeScores2 <- round(runif(length(fakeReviews), min=1, max=100))
fake.df.critics <- data.frame(fakeReviews)
head(fake.df.critics)
names(fake.df.critics) <- c("Season")
head(fake.df.critics)
fake.df.critics$'Critical response >> RottenTomatoes' <- paste0(fakeScores1, "% (33 reviews)")
head(fake.df.critics)
fake.df.critics$'Critical response >> Metacritic' <- paste0(fakeScores2, "% (34 reviews)")
names(fake.df.critics$`Critical response >> RottenTomatoes`) <- c("Critical response >> Rotten Tomatoes")
head(fake.df.critics)
names(fake.df.critics$`Critical response >> RottenTomatoes`) <- "Critical response >> Rotten Tomatoes"
head(fake.df.critics)
fake.df.critics$'Critical response >> Rotten Tomatoes' <- paste0(fakeScores1, "% (33 reviews)")
head(fake.df.critics)
library(dplyr)
select(fake.df.critics, -c('Critical response >> RottenTomatoes'))
head(fake.df.critics)
fake.df.critics$'Critical response >> RottenTomatoes' <-NULL
head(fake.df.critics)
head(fake.df.critics)
seasons$Season <- as.numeric(seasons$Season)
criticResponses$Season <- as.numeric(criticResponses$Season)
seasons <- rbind(seasons, fake.df.seasons)
tail(seasons)
head(seasons,10)
criticResponses <- rbind(criticResponses, fake.df.critics)
tail(criticResponses)
head(criticResponses, 10)
seasons$Season <- factor(seasons$Season, levels = c(1:100), labels = c(1:100))
criticResponses$Season <- as.factor(criticResponses$Season)
?sample_n
head(seasibs)
head(seasons)
seasons <- sample_n(seasons, size = nrow(seasons))
head(seasons)
seasons <- sample_n(seasons, size = nrow(seasons))
head(seasons)
seasons <- sample_n(seasons, size = nrow(seasons))
head(seasons)
seasons <- sample_n(seasons, size = nrow(seasons))
head(seasons)
seasons <- sample_n(seasons, size = nrow(seasons))
head(seasons)
seasons <- sample_n(seasons, size = nrow(seasons))
head(seasons)
seasons <- sample_n(seasons, size = nrow(seasons))
head(seasons)
seasons <- sample_n(seasons, size = nrow(seasons))
head(seasons)
criticResponses <- sample_n(criticResponses, size = nrow(criticResponses))
head(criticResponses)
GoTWiki2 <- merge(seasons, criticResponses, by="Season")
str(GoTWiki2)
head(GoTWiki2)
GoTWiki2
library("MASS")
library("ISLR")
install.packages("ISLR")
library("MASS")
library("ISLR")
?Boston
?fix
?data
bostonDF <- data("Boston")
bostonDF
Boston
head(Boston)
bostonDF <- NULL
?rm
remove(bostonDF)
names(Boston)
?Boston
?lm
?lm.fit
lm.fit = lm(medv~lstat)
lm.fit = lm(medv~lstat, data = Boston)
?attach
attach(Boston)
lm.fit = lm(medv~lstat)
lm.fit
summary(lm.fit)
length(Boston)
length(Boston[1])
length(Boston[[1]])
Boston[[1]][1]
Boston[[1]]
names(lm.fit)
lm.fit['model']
confint(lm.fit)
predict(lm.fit, data.frame(lstat = c(5,10,15)), interval = "confidence")
predict(lm.fit, data.frame(lstat = c(5,10,15,25)), interval = "confidence")
predict(lm.fit, data.frame(lstat = c(5,10,15,25, 0)), interval = "confidence")
plot(lstat,medv)
abline(lm.fit)
abline(lm.fit, pch = 20)
plot(lstat,medv, pch = 20)
abline(lm.fit)
plot(lstat,medv, pch = "+")
plot(lstat,medv, pch = 1:20)
plot(1:20,1:20, pch = 1:20)
"+"
plot(lstat,medv, pch = "+")
abline(lm.fit, lwd = 3, col = #FF0000)
abline(lm.fit, lwd = 3, col = "red")
abline(lm.fit, lwd = 3, col = "red")
abline(lm.fit, lwd = 1, col = "red")
plot(lstat,medv, pch = "+")
abline(lm.fit, lwd = 1, col = "red")
abline(lm.fit, lwd = 1, col = "#FF0000")
plot(lstat,medv, pch = "+")
abline(lm.fit, lwd = 1, col = "#FF0000")
abline(lm.fit, lwd = 1, col = "#00FF00")
par(mfrow = c(2,2))
plot(lm.fit)
?confint
confint(lm.fit, level = 0.90)
confint(lm.fit, level = 0.95)
residuals(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
par(mfrow = c(2,2))
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
?rstudent
library(ISLR)
data("Hitters")
Hitters <- na.omit(Hitters)
x <- model.matrix(Salary~., Hitters)[,-1]
View(x)
View(x)
View(Hitters)
View(Hitters)
View(x)
View(x)
View(Hitters)
View(Hitters)
View(x)
View(x)
View(Hitters)
View(Hitters)
y <- Hitters$Salary
?set.seed()
set.seed(1)
train <- sample(1:nrow(x), nrow(x)/2)
view(train)
View(train)
test <- (-train)
View(test)
y.test <- y[test]
View(y.test)
x <- model.matrix(Salary~Assists+Errors., Hitters)[,-1]
x <- model.matrix(Salary~.,Assists+Errors, Hitters)[,-1]
x <- model.matrix(Salary~., Hitters)[,-1]
rnorm(10)
rnorm(10)
set.seed(1)
rnorm(10)
set.seed(1)
rnorm(10)
rnorm(10)
set.seed(10)
rnorm(10)
rnorm(10)
set.seed(10)
rnorm(10)
?nrow
?sample
library(pls)
install.packages("pls")
library(pls)
set.seed(2)
pcr.fit = pcr(Salary~., data = Hitters, scale=TRUE, validation = "CV")
summary(pcr.fit)
validationplot()# Lab 5
library(MASS)
validationplot(pcr.fit, val.type = "MSEP")
plot(Hitters$Salary)
hist(Hitters$Salary)
validationplot(pcr.fit, val.type = "RMSEP")
validationplot(pcr.fit, val.type = "MSEP")
set.seed(1)
pcr.fit = pcr(Salary~., data=Hitters, subset = train, scale=TRUE, validation="CV")
validationplot(pcr.fit, val.type = "MSEP")
pcr.pred = predict(pcr.fit, x[test,], ncomp = 7)
mean((pcr.pred-y.test)^2)
alcohol_df <- read.csv("C:\\Users\\Soham More\\Documents\\GitHub\\dmml1\\Datasets\\Iowa_Liquor_Sales\\v1_Data_Processing\\Iowa_Liquor_Sales_Final_2015_2016_v2.csv")
alcohol_df <- read.csv("C:\\Users\\Soham More\\Documents\\GitHub\\dmml1\\Datasets\\Iowa_Liquor_Sales\\v1_Data_Processing\\Iowa_Liquor_Sales_Final_2015_2016_v2.csv", header = TRUE)
alcohol_df <- read.csv("C:\\Users\\Soham More\\Documents\\GitHub\\dmml1\\Datasets\\Iowa_Liquor_Sales\\v1_Data_Processing\\Iowa_Liquor_Sales_Final_2015_2016_v2.csv", header = TRUE)
plot(alcohol_df$Sale..Dollars., alcohol_df$Category.Name)
setwd("C:/Users/Soham More/Documents/Github/dmml1/Datasets/Iowa_Liquor_Sales/v1_Data_Processing/")
alcohol_df <- read.csv("Iowa_Liquor_Sales_Final_2015_2016.csv", header = TRUE)
