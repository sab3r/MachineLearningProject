library(ISLR)
data("Hitters")
Hitters <- na.omit(Hitters)
x <- model.matrix(Salary~., Hitters)[,-1]
View(x)
View(x)
View(Hitters)
View(Hitters)
View(x)
View(x)
View(Hitters)
View(Hitters)
View(x)
View(x)
View(Hitters)
View(Hitters)
y <- Hitters$Salary
?set.seed()
set.seed(1)
train <- sample(1:nrow(x), nrow(x)/2)
view(train)
View(train)
test <- (-train)
View(test)
y.test <- y[test]
View(y.test)
x <- model.matrix(Salary~Assists+Errors., Hitters)[,-1]
x <- model.matrix(Salary~.,Assists+Errors, Hitters)[,-1]
x <- model.matrix(Salary~., Hitters)[,-1]
rnorm(10)
rnorm(10)
set.seed(1)
rnorm(10)
set.seed(1)
rnorm(10)
rnorm(10)
set.seed(10)
rnorm(10)
rnorm(10)
set.seed(10)
rnorm(10)
?nrow
?sample
library(pls)
install.packages("pls")
library(pls)
set.seed(2)
pcr.fit = pcr(Salary~., data = Hitters, scale=TRUE, validation = "CV")
summary(pcr.fit)
validationplot()# Lab 5
library(MASS)
validationplot(pcr.fit, val.type = "MSEP")
plot(Hitters$Salary)
hist(Hitters$Salary)
validationplot(pcr.fit, val.type = "RMSEP")
validationplot(pcr.fit, val.type = "MSEP")
set.seed(1)
pcr.fit = pcr(Salary~., data=Hitters, subset = train, scale=TRUE, validation="CV")
validationplot(pcr.fit, val.type = "MSEP")
pcr.pred = predict(pcr.fit, x[test,], ncomp = 7)
mean((pcr.pred-y.test)^2)
getwd()
setwd("C:/Users/Soham More/Documents/Github/dmml1/v1_Data_Processing/Iowa_Alcohol_Sales/")
alcohol_df <- read.csv("Iowa_Liquor_Sales_Final.csv", header = TRUE)
setwd("C:/Users/Soham More/Documents/Github/dmml1/v1_Data_Processing/Iowa_Alcohol_Sales/")
alcohol_df <- read.csv("Iowa_Liquor_Sales_Final.csv", header = TRUE)
library(dplyr)
alcohol_df_2015_2016 <- alcohol_df %>%
filter(Date >= as.Date("2015-01-01") & Date <= as.Date("2016-12-31"))
tail(alcohol_df)
class(alcohol_df$Date)
alcohol_df$Date <- as.character(alcohol_df$Date)
# Filter data for years 2015 and 2016.
alcohol_df_2015_2016 <- alcohol_df %>%
filter(Date >= as.Date("2015-01-01") & Date <= as.Date("2016-12-31"))
anytime::anydate(head(alcohol_df$Date))
alcohol_df$Date <- anytime::anydate(alcohol_df$Date)
# Filter data for years 2015 and 2016.
alcohol_df_2015_2016 <- alcohol_df %>%
filter(Date >= as.Date("2015-01-01") & Date <= as.Date("2016-12-31"))
# Order the data using Date and Store Name
alcohol_df_2015_2016 <- alcohol_df_2015_2016[with(dataframe, order(Date, Store.Name))]
# Order the data using Date and Store Name
alcohol_df_2015_2016 <- alcohol_df_2015_2016[with(alcohol_df_2015_2016, order(Date, Store.Name))]
names(alcohol_df_2015_2016)
# Order the data using Date and Store Name
alcohol_df_2015_2016 <- alcohol_df_2015_2016[with(alcohol_df_2015_2016, order(Date, Store.Name))]
names(alcohol_df_2015_2016[,1])
names(alcohol_df_2015_2016[1])
names(alcohol_df_2015_2016[2])
names(alcohol_df_2015_2016[4])
# Order the data using Date and Store Name
alcohol_df_2015_2016 <- alcohol_df_2015_2016[order(alcohol_df_2015_2016[2], alcohol_df_2015_2016[4])]
# Order the data using Date and Store Name
alcohol_df_2015_2016 <- alcohol_df_2015_2016[order(alcohol_df_2015_2016[2])]
# Order the data using Date and Store Name
alcohol_df_2015_2016[order(alcohol_df_2015_2016[,2], alcohol_df_2015_2016[,4])]
names(alcohol_df_2015_2016)
# Check head and tail if the data is correct.
head(alcohol_df_2015_2016)
tail(alcohol_df_2015_2016)
# Check head and tail if the data is correct.
head(alcohol_df_2015_2016)
# Order the data using Date and Store Name
alcohol_df_2015_2016[order(alcohol_df_2015_2016[,2])]
# Order the data using Date and Store Name
alcohol_df_2015_2016[with(alcohol_df_2015_2016, order("Date", "Store.Name")),]
names(alcohol_df_2015_2016)
# Order the data using Date and Store Name
alcohol_df_2015_2016[with(alcohol_df_2015_2016, order("Date", "Store.Name")),]
# Check head and tail if the data is correct.
head(alcohol_df_2015_2016)
tail(alcohol_df_2015_2016)
# Order the data using Date and Store Name
alcohol_df_2015_2016[with(alcohol_df_2015_2016, order(as.Date("Date"), "Store.Name")),]
# Order the data using Date and Store Name
alcohol_df_2015_2016[order(as.Date(alcohol_df_2015_2016$Date, format="%Y-%m-%d"))]
names(alcohol_df_2015_2016)
# Check head and tail if the data is correct.
head(alcohol_df_2015_2016$Date)
# Order the data using Date and Store Name
new_alcohol_df <- alcohol_df_2015_2016[order(as.Date(alcohol_df_2015_2016$Date), alcohol_df_2015_2016$Store.Name),]
# Check head and tail if the data is correct.
head(alcohol_df_2015_2016$Date)
# Check head and tail if the data is correct.
head(alcohol_df_2015_2016)
tail(alcohol_df_2015_2016)
# Check head and tail if the data is correct.
head(alcohol_df_2015_2016)
# Check head and tail if the data is correct.
head(new_alcohol_df)
tail(new_alcohol_df)
# Check head and tail if the data is correct.
?head(new_alcohol_df)
# Check head and tail if the data is correct.
?head(new_alcohol_df, 10)
# Check head and tail if the data is correct.
head(new_alcohol_df, 10)
# Check head and tail if the data is correct.
head(new_alcohol_df$Date, 40)
# Check head and tail if the data is correct.
head(new_alcohol_df$Date, 60)
# Check head and tail if the data is correct.
head(new_alcohol_df$Store.Name, 60)
sapply(alcohol_df, function(x) {sum(if(x=='') {TRUE} else {FALSE})})
sapply(alcohol_df, function(x) sum(is.na(x)))
sapply(new_alcohol_df, function(x) sum(is.na(x)))
# Check for NaN values
sapply(new_alcohol_df, function(x) sum(is.nan(x)))
# Check for blank values
sapply(new_alcohol_df, function(x) sum(is.empty(x)))
# Replace all blank values ('') with NA
sapply(new_alcohol_df, function(x) x[x==''] <- NA)
# Replace all blank values ('') with NA
new_alcohol_df[, ] <- lapply(new_alcohol_df[, ], as.character)
sapply(new_alcohol_df, function(x) x[x==''] <- NA)
# Check head and tail if the data is correct.
head(new_alcohol_df)
# Check for NA values
sapply(new_alcohol_df, function(x) sum(is.na(x)))
# Order the data using Date and Store Name
new_alcohol_df <- alcohol_df_2015_2016[order(as.Date(alcohol_df_2015_2016$Date), alcohol_df_2015_2016$Store.Name),]
# Check head and tail if the data is correct.
head(new_alcohol_df)
tail(new_alcohol_df)
# Check for NA values
sapply(new_alcohol_df, function(x) sum(is.na(x)))
# Check for NaN values
sapply(new_alcohol_df, function(x) sum(is.nan(x)))
View(new_alcohol_df)
View(new_alcohol_df)
# Check unique values
sapply(new_alcohol_df, function(x) length(unique(x)))
# Check head and tail if the data is correct.
head(new_alcohol_df)
new_alcohol_df[new_alcohol_df$Date == as.Date("2015-01-06")]
new_alcohol_df[new_alcohol_df$Date == as.Date("2015-01-06"), ]
length(new_alcohol_df$Store.Name[new_alcohol_df$Date == as.Date("2015-01-06"), ])
length(new_alcohol_df$Store.Name[new_alcohol_df$Date == as.Date("2015-01-06")])
hist(new_alcohol_df$Store.Name[new_alcohol_df$Date == as.Date("2015-01-06")])
hist(new_alcohol_df$Store.Pack[new_alcohol_df$Date == as.Date("2015-01-06")])
hist(new_alcohol_df$Pack[new_alcohol_df$Date == as.Date("2015-01-06")])
hist(new_alcohol_df$Volume.Sold..Liters.[new_alcohol_df$Date == as.Date("2015-01-06")])
hist(new_alcohol_df$Sales..Dollars[new_alcohol_df$Date == as.Date("2015-01-06")])
hist(new_alcohol_df$Sales..Dollars.[new_alcohol_df$Date == as.Date("2015-01-06")])
class(new_alcohol_df$Sale..Dollars.)
new_alcohol_df$Sale..Dollars. <- as.character(new_alcohol_df$Sale..Dollars.)
class(new_alcohol_df$Sale..Dollars.)
# Remove the '$' symbol from the columns 'Sale..Dollars.' 'State.Bottle.Retail' and 'State.Bottle.Cost'
new_alcohol_df$Sale..Dollars. <- as.numeric(gsub("\\$", "", new_alcohol_df$Sale..Dollars.))
head(new_alcohol_df)
new_alcohol_df$State.Bottle.Cost <- as.numeric(gsub("\\$", "", new_alcohol_df$State.Bottle.Cost))
new_alcohol_df$State.Bottle.Retail <- as.numeric(gsub("\\$", "", new_alcohol_df$State.Bottle.Retail))
head(new_alcohol_df)
# Write all the date to a new file.
write.csv(new_alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016.csv")
x <- "  Some text. "
x
trimws(x)
x
trimws(x, "b")
x
trimws(x)
x
# Trim White Spaces from all the columns
sapply(new_alcohol_df, function(x) x <- trimws(x))
# Check unique values
sapply(new_alcohol_df, function(x) length(unique(x)))
# Write all the data to a new file.
write.csv(new_alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016.csv")
# Check for Null values
sapply(new_alcohol_df, function(x) sum(is.null(x)))
install.packages("â€˜rapportoolsâ€™")
# Check for Null values
sapply(new_alcohol_df, function(x) sum(grepl("^\\s*$", x)))
head(new_alcohol_df)
# Write all the data to a new file.
write.csv(new_alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016.csv")
getwd()
setwd("C:/Users/Soham More/Documents/Github/dmml1/v1_Data_Processing/Iowa_Alcohol_Sales/")
alcohol_df <- read.csv("Iowa_Liquor_Sales.csv", header = TRUE)
library(dplyr)
View(alcohol_df_2015_2016)
alcohol_df <- read.csv("Iowa_Liquor_Sales.csv", header = TRUE)
library(dplyr)
# Change Date from factor to character so that data can be filtered for specific years.
class(alcohol_df$Date)
alcohol_df$Date <- as.character(alcohol_df$Date)
# Check if the date is formatted correctly before applying it to the dataframe.
anytime::anydate(head(alcohol_df$Date))
# Transform the Date values so that we can perform operations on it.
alcohol_df$Date <- anytime::anydate(alcohol_df$Date)
# Check if the date is formatted correctly before applying it to the dataframe.
anytime::anydate(head(alcohol_df$Date))
# Filter data for years 2015 and 2016.
alcohol_df_2015_2016 <- alcohol_df %>%
filter(Date >= as.Date("2015-01-01") & Date <= as.Date("2016-12-31"))
names(alcohol_df_2015_2016)
# Order the data using Date and Store Name
new_alcohol_df <- alcohol_df_2015_2016[order(as.Date(alcohol_df_2015_2016$Date), alcohol_df_2015_2016$Store.Name),]
# Check head and tail if the data is correct.
head(new_alcohol_df)
tail(new_alcohol_df)
# Check for NA values
sapply(new_alcohol_df, function(x) sum(is.na(x)))
# Check for NaN values
sapply(new_alcohol_df, function(x) sum(is.nan(x)))
# Check for Blank values
sapply(new_alcohol_df, function(x) sum(grepl("^\\s*$", x)))
with(new_alcohol_df, unique(Store.Name[grepl("^\\s*$", County)]))
StoreNamesWhereCountyDataIsMissing <- with(new_alcohol_df, unique(Store.Name[grepl("^\\s*$", County)]))
write.csv(StoreNamesWhereCountyDataIsMissing, "Iowa_Liquor_Stores_With_Missing_County.csv")
# Check unique values
sapply(new_alcohol_df, function(x) length(unique(x)))
head(new_alcohol_df)
# Remove the '$' symbol from the columns 'Sale..Dollars.' 'State.Bottle.Retail' and 'State.Bottle.Cost'
new_alcohol_df$Sale..Dollars. <- as.numeric(gsub("\\$", "", new_alcohol_df$Sale..Dollars.))
new_alcohol_df$State.Bottle.Cost <- as.numeric(gsub("\\$", "", new_alcohol_df$State.Bottle.Cost))
new_alcohol_df$State.Bottle.Retail <- as.numeric(gsub("\\$", "", new_alcohol_df$State.Bottle.Retail))
# Trim White Spaces from all the columns
sapply(new_alcohol_df, function(x) x <- trimws(x))
# Check unique values
sapply(new_alcohol_df, function(x) length(unique(x)))
# Write all the data to a new file.
write.csv(new_alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016.csv")
# Set the appropriate directory for the data file.
getwd()
setwd("C:/Users/Soham More/Documents/Github/dmml1/Datasets/Iowa_Liquor_Sales/v1_Data_Processing/")
alcohol_df <- read.csv("Iowa_Liquor_Sales_Final_2015_2016.csv", header = TRUE)
length(alcohol_df[alcohol_df$County == ''])
names(alcohol_df)
length(alcohol_df$Invoice.Item.Number[alcohol_df$County == ''])
dataWithEmptyCounty <- alcohol_df[alcohol_df$County == '']
dataWithEmptyCounty <- alcohol_df[alcohol_df$County == '',]
names(dataWithEmptyCounty)
# Read the correct data
correctCountyData <- read.csv("Data_From_Maps_API.csv", header = TRUE)
head(dataWithEmptyCounty)
dataWithEmptyCounty$County.Number[-is.na(dataWithEmptyCounty$County.Number)]
dataWithEmptyCounty$County.Number[!is.na(dataWithEmptyCounty$County.Number)]
head(new_alcohol_df$County.Number, 30)
head(new_alcohol_df$County.Number, 60)
for(i in 1:lenght(correctCountyData$County.Name)){
dataWithEmptyCounty$Address[dataWithEmptyCounty$Store.Name == correctCountyData$StoreName[i]] <- correctCountyData$Address
dataWithEmptyCounty$Store.Location[dataWithEmptyCounty$Store.Name == correctCountyData$StoreName[i]] <- paste('POINT (',correctCountyData$Lat, ' ', correctCountyData$Lng, ')')
dataWithEmptyCounty$County[dataWithEmptyCounty$Store.Name == correctCountyData$StoreName[i]] <- correctCountyData$County.Name
}
for(i in 1:length(correctCountyData$County.Name)){
dataWithEmptyCounty$Address[dataWithEmptyCounty$Store.Name == correctCountyData$StoreName[i]] <- correctCountyData$Address
dataWithEmptyCounty$Store.Location[dataWithEmptyCounty$Store.Name == correctCountyData$StoreName[i]] <- paste('POINT (',correctCountyData$Lat, ' ', correctCountyData$Lng, ')')
dataWithEmptyCounty$County[dataWithEmptyCounty$Store.Name == correctCountyData$StoreName[i]] <- correctCountyData$County.Name
}
dataWithEmptyCounty[] <- lapply(dataWithWmptyCounty, as.character)
dataWithEmptyCounty[] <- lapply(dataWithEmptyCounty, as.character)
correctCountyData[] <- lapply(correctCountyData, as.character)
for(i in 1:length(correctCountyData$County.Name)){
dataWithEmptyCounty$Address[dataWithEmptyCounty$Store.Name == correctCountyData$StoreName[i]] <- correctCountyData$Address
dataWithEmptyCounty$Store.Location[dataWithEmptyCounty$Store.Name == correctCountyData$StoreName[i]] <- paste('POINT (',correctCountyData$Lat, ' ', correctCountyData$Lng, ')')
dataWithEmptyCounty$County[dataWithEmptyCounty$Store.Name == correctCountyData$StoreName[i]] <- correctCountyData$County.Name
}
warnings()
length(dataWithEmptyCounty$County[dataWithEmptyCounty$County == ''])
head(dataWithEmptyCounty)
dataWithEmptyCounty$Store.Name[dataWithEmptyCounty$County == '']
# Set the appropriate directory for the data file.
getwd()
setwd("C:/Users/Soham More/Documents/Github/dmml1/Datasets/Iowa_Liquor_Sales/v1_Data_Processing/")
alcohol_df <- read.csv("Iowa_Liquor_Sales_Final_2015_2016.csv", header = TRUE)
dataWithEmptyCounty <- alcohol_df[alcohol_df$County == '',]
names(dataWithEmptyCounty)
# Write all the data to a new file.
write.csv(new_alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016.csv")
# Write all the data to a new file.
write.csv(new_alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016.csv")
alcohol_df <- read.csv("Iowa_Liquor_Sales_Final_2015_2016.csv", header = TRUE)
names(dataWithEmptyCounty)
rm(alcohol_df)
alcohol_df <- read.csv("Iowa_Liquor_Sales_Final_2015_2016.csv", header = TRUE)
head(alcohol_df)
# Write all the data to a new file.
write.csv(new_alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016.csv", col.names = NA, row.names = NA)
# Write all the data to a new file.
write.csv(new_alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016.csv", row.names = NA)
?write.csv
# Write all the data to a new file.
write.csv(new_alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016.csv", row.names = FALSE, col.names = FALSE)
# Write all the data to a new file.
write.csv(new_alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016.csv", row.names = FALSE)
rm(alcohol_df)
alcohol_df <- read.csv("Iowa_Liquor_Sales_Final_2015_2016.csv", header = TRUE)
# Read the correct data
correctCountyData <- read.csv("Data_From_Maps_API.csv", header = TRUE)
alcohol_df[] <- lapply(alcohol_df, as.character)
correctCountyData[] <- lapply(correctCountyData, as.character)
for(i in 1:length(correctCountyData$County.Name)){
alcohol_df$Address[alcohol_df$Store.Name == correctCountyData$StoreName[i]] <- correctCountyData$Address
alcohol_df$Store.Location[alcohol_df$Store.Name == correctCountyData$StoreName[i]] <- paste('POINT (',correctCountyData$Lat, ' ', correctCountyData$Lng, ')')
alcohol_df$County[alcohol_df$Store.Name == correctCountyData$StoreName[i]] <- correctCountyData$County.Name
}
# Check for Blank values
sapply(new_alcohol_df, function(x) sum(grepl("^\\s*$", x)))
c(1:5)
# Check for Blank values
sapply(alcohol_df, function(x) sum(grepl("^\\s*$", x)))
# Write all the data to a new file.
write.csv(alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016_v2.csv", row.names = FALSE)
# Write the data with blank County to a new file for review
write.csv(alcohol_df[alcohol_df$County =='', ], "Iowa_Liquor_Sales_Final_2015_2016_v2_blank_county_review.csv", row.names = FALSE)
alcohol_df[alcohol_df$County == '']
alcohol_df[alcohol_df$County == '',]
alcohol_df$Store.Name[alcohol_df$County == '',] <- 'Yesway Store # 10029/ Clarion'
alcohol_df$Store.Name[alcohol_df$County == ''] <- 'Yesway Store # 10029/ Clarion'
alcohol_df$Store.Name[alcohol_df$County == '', ]
alcohol_df[alcohol_df$County == '', ]
# Add County to the rows missing the data.
alcohol_df$County[alcohol_df$County == ''] <- 'Wright'
alcohol_df[alcohol_df$County == '', ]
# Write all the data to a new file......AGAIN!
write.csv(alcohol_df, "Iowa_Liquor_Sales_Final_2015_2016_v2.csv", row.names = FALSE)
# Set the appropriate directory for the data file.
getwd()
setwd("C:/Users/Soham More/Documents/Github/dmml1/Datasets/Iowa_Raod_Accidents/v1_Data_Processing/")
setwd("C:/Users/Soham More/Documents/Github/dmml1/Datasets/Iowa_Road_Accidents/v1_Data_Processing/")
accidents_df <- read.csv("Vehicle_Accidents_in_Iowa_by_Location__Last_Ten_Years_.csv", header = TRUE)
names(accidents_df)
# Change Date from factor to character so that data can be filtered for specific years.
class(accidents_df$Crash.Date...Time)
accidents_df$Crash.Date...Time <- as.character(accidents_df$Crash.Date...Time)
# Check variable names.
names(accidents_df)
# Check if the date is formatted correctly before applying it to the dataframe.
anytime::anydate(head(accidents_df$Crash.Date...Time))
# Transform the Date values so that we can perform operations on it.
accidents_df$Crash.Date...Time <- anytime::anydate(accidents_df$Crash.Date...Time)
# Filter data for years 2015 and 2016.
accident_df_2015_2016 <- accident_df %>%
filter(Crash.Date...Time >= as.Date("2015-01-01") & Crash.Date...Time <= as.Date("2016-12-31"))
# Filter data for years 2015 and 2016.
accident_df_2015_2016 <- accident_df %>%
filter(accidents_df$Crash.Date...Time >= as.Date("2015-01-01") & accidents_df$Crash.Date...Time <= as.Date("2016-12-31"))
# Filter data for years 2015 and 2016.
accident_df_2015_2016 <- accidents_df %>%
filter(accidents_df$Crash.Date...Time >= as.Date("2015-01-01") & accidents_df$Crash.Date...Time <= as.Date("2016-12-31"))
names(accident_df_2015_2016)
# Order the data using Date and Store Name
new_accident_df <- accident_df_2015_2016[order(as.Date(accident_df_2015_2016$Crash.Date...Time), accident_df_2015_2016$County),]
# Check head and tail if the data is correct.
head(new_accident_df)
tail(new_accident_df)
# Check for NA values
sapply(new_accident_df, function(x) sum(is.na(x)))
# Check for NaN values
sapply(new_accident_df, function(x) sum(is.nan(x)))
# Check for Blank values
sapply(new_accident_df, function(x) sum(grepl("^\\s*$", x)))
# Check unique values
sapply(new_accident_df, function(x) length(unique(x)))
# Trim White Spaces from all the columns
sapply(new_accident_df, function(x) x <- trimws(x))
# Write all the data to a new file.
write.csv(new_accident_df, "Vehicle_Accidents_in_Iowa_2015_2016.csv", row.names = FALSE)
head(new_accident_df$Crash.Time)
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '12:00']
new_accident_df$Crash.Time <- as.character(new_accident_df$Crash.Time)
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '12:00']
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '12:00' & new_accident_df$Crash.Time < '18:00']
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '12:00' & new_accident_df$Crash.Time <= '18:00']
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '12:00' & new_accident_df$Crash.Time <= '18:00'] <- 'Afternoon'
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '12:00' & new_accident_df$Crash.Time <= '18:00']
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '06:00' & new_accident_df$Crash.Time <= '12:00']
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '06:00' & new_accident_df$Crash.Time <= '12:00'] <- 'Morning'
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '18:00' & new_accident_df$Crash.Time <= '00:00']
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '18:00' & new_accident_df$Crash.Time <= '24:00']
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '18:00' & new_accident_df$Crash.Time <= '24:00'] <- 'Evening'
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '00:00' & new_accident_df$Crash.Time <= '06:00']
new_accident_df$Crash.Time[new_accident_df$Crash.Time > '00:00' & new_accident_df$Crash.Time <= '06:00'] <- 'Night'
unique(new_accident_df$Crash.Time)
new_accident_df$Crash.Time[new_accident_df$Crash.Time == '00:00'] <- 'Evening'
unique(new_accident_df$Crash.Time)
head(new_accident_df$Crash.Time)
rm()
rm('new_accident_df')
rm('accident_df_2015_2016')
rm('accidents_df')
rm('alcohol_df')
rm('alcohol_df_2015_2016')
rm('correctCountyData')
rm('dataWithEmptyCounty')
rm('new_alcohol_df')
rm('i')
# Set the appropriate directory for the data file.
getwd()
setwd("C:/Users/Soham More/Documents/Github/dmml1/Datasets/Iowa_Road_Accidents/v1_Data_Processing/")
accidents_df <- read.csv("Vehicle_Accidents_in_Iowa_by_Location__Last_Ten_Years_.csv", header = TRUE)
install.packages('fpp2')
library(fpp2)
nhtemp
names(nhtemp)
plot(nhtemp)
# fit simple exponential smoothing model
nhfit <- ses(nhtemp, h=2)
nhfit
nhfit$model
round(accuracy(nhfit), 2)
autoplot(nhfit)
autoplot(nhfit)+
autolayer(fitted(nhfit), series = "Fitted")
ait <- window(ausair, start=1990)
air
rm(ait)
air <- window(ausair, start=1990)
air
plot(air)
airfit <- holt(air, h=5)
airfit$model
airfit
airfit2
airfit2 <- ets(air, model = "AAM")
airfit2
airfit2 <- ets(air, model = "AAN")
airfit2
forecast(airfit2, 5)
round(accuracy(airfit2), 2)
airfit3 <- ets(air, model = "ZZZ")
airfit3
forecast(airfit3, 5)
round(accuracy(airfit3), 2)
books
names(books)
plot(books)
plot(books$Paperback)
plot(books['Paperback'])
plot(books[Paperback])
plot(books)
booksfit <- holt(books, h=5)
plot(books.Paperback)
class(books)
autoplot(books)
fcast1 <- ses(books[,"Hardcover"], h=4)
fcast2 <- ses(books[,"Paperback"], h=4])
fcast2 <- ses(books[,"Paperback"], h=4)
fcast1
fcast2
fcast1$model
fcast2$model
autoplot(books)+
autolayer(fcast1, series="Hardcover", PI=FALSE)+
autolayer(fcast2, series="Paperback", PI=FALSE)
# Compute the RMS values for the training data in each case
accuracy(fcast1)
accuracy(fcast2)
fcast3 <- holt(books[,"Hardcover"], h=4)
fcast4 <- holt(books[, "Paperback"], h=4)
accuracy(fcast3)
accuracy(fcast4)
fcast3
fcast4
autoplot(books)+
autolayer(fcast3, series="Hardcover", PI=FALSE)+
autolayer(fcast4, series="Paperback", PI=FALSE)
autoplot(books)+
autolayer(fcast1, series="Hardcover", PI=FALSE)+
autolayer(fcast2, series="Paperback", PI=FALSE)
autoplot(books)+
autolayer(fcast3, series="Hardcover", PI=FALSE)+
autolayer(fcast4, series="Paperback", PI=FALSE)
autoplot(books)+
autolayer(fcast3, series="Hardcover", PI=TRUE)+
autolayer(fcast4, series="Paperback", PI=TRUE)
autoplot(books)+
autolayer(fcast3, series="Hardcover", PI=FALSE)+
autolayer(fcast4, series="Paperback", PI=FALSE)
